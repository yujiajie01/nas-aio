name: NAS 自动化系统 CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 每天凌晨2点运行测试
    - cron: '0 2 * * *'

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: nas-aio

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: 代码质量检查
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: Shell 脚本语法检查
      run: |
        echo "检查 Shell 脚本语法..."
        find . -name "*.sh" -type f | while read -r script; do
          echo "检查: $script"
          bash -n "$script" || exit 1
        done
        
    - name: Docker Compose 配置验证
      run: |
        echo "验证 Docker Compose 配置..."
        # 创建临时环境变量文件
        cp .env.template .env
        
        # 验证核心服务配置
        docker-compose -f docker-compose.core.yml config -q
        
        # 验证扩展服务配置
        docker-compose -f docker-compose.extend.yml config -q
        
        # 验证监控服务配置
        docker-compose -f docker-compose.monitoring.yml config -q
        
    - name: Markdown 文档检查
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    name: 单元测试
    needs: code-quality
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 准备测试环境
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget jq bc
        
    - name: 运行单元测试
      run: |
        chmod +x tests/unit-tests.sh
        ./tests/unit-tests.sh
        
    - name: 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: /tmp/nas-unit-tests/

  # 集成测试
  integration-tests:
    runs-on: ubuntu-latest
    name: 集成测试
    needs: unit-tests
    
    services:
      # Redis for testing
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 准备测试环境
      run: |
        # 创建测试目录
        sudo mkdir -p /opt/nas-data/{downloads,media,config,logs}
        sudo chown -R $USER:$USER /opt/nas-data
        
        # 创建测试配置
        cp .env.template .env
        sed -i 's/your_api_token_here/test_token_123/' .env
        sed -i 's/your_emby_api_key_here/test_emby_key/' .env
        sed -i 's/adminpass/test_qb_pass/' .env
        sed -i 's/password123/test_tr_pass/' .env
        
    - name: 启动核心服务进行测试
      run: |
        # 创建网络
        docker network create --driver bridge --subnet=172.20.0.0/16 nas-network || true
        
        # 启动核心服务（使用轻量级镜像进行测试）
        docker-compose -f docker-compose.core.yml up -d --wait
        
        # 等待服务启动
        sleep 30
        
    - name: 运行集成测试
      run: |
        chmod +x tests/system-test.sh
        ./tests/system-test.sh --quick
        
    - name: 运行性能测试
      run: |
        chmod +x tests/performance-test.sh  
        ./tests/performance-test.sh --quick
        
    - name: 收集服务日志
      if: failure()
      run: |
        echo "=== Docker 服务状态 ==="
        docker ps -a
        
        echo "=== 容器日志 ==="
        docker-compose -f docker-compose.core.yml logs
        
    - name: 上传测试报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: /tmp/nas-*-test*.log

  # Docker 镜像构建和推送
  build-and-push:
    runs-on: ubuntu-latest
    name: 构建和推送镜像
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 登录到 Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 构建并推送镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署测试
  deployment-test:
    runs-on: ubuntu-latest
    name: 部署测试
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 模拟部署测试
      run: |
        echo "=== 部署前检查 ==="
        
        # 检查必需文件
        required_files=(
          "install.sh"
          "docker-compose.core.yml"  
          "docker-compose.extend.yml"
          ".env.template"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "错误: 缺少必需文件 $file"
            exit 1
          fi
          echo "✓ $file 存在"
        done
        
        echo "=== 脚本权限检查 ==="
        chmod +x install.sh setup-directories.sh
        chmod +x scripts/*.sh
        chmod +x tests/*.sh
        
        echo "=== 配置文件验证 ==="
        if ! grep -q "PUID=" .env.template; then
          echo "错误: 配置模板缺少必需变量"
          exit 1
        fi
        
        echo "✓ 部署测试通过"

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: 安全扫描
    needs: code-quality
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 上传 Trivy 扫描结果到 GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 检查敏感信息
      run: |
        echo "检查敏感信息泄露..."
        
        # 检查是否包含硬编码密码
        if grep -r -E "(password|passwd|pwd).*(=|:).*(123|admin|root|password)" . --exclude-dir=.git; then
          echo "警告: 发现可能的硬编码密码"
        fi
        
        # 检查 API 密钥格式
        if grep -r -E "[a-zA-Z0-9]{32,}" . --exclude-dir=.git --exclude="*.md" | grep -v template; then
          echo "警告: 发现可能的硬编码 API 密钥"  
        fi

  # 性能基准测试
  performance-benchmark:
    runs-on: ubuntu-latest
    name: 性能基准测试
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置测试环境
      run: |
        sudo mkdir -p /opt/nas-data
        sudo chown -R $USER:$USER /opt/nas-data
        cp .env.template .env
        
    - name: 运行性能基准测试  
      run: |
        chmod +x tests/performance-test.sh
        ./tests/performance-test.sh --time 300  # 5分钟测试
        
    - name: 上传性能报告
      uses: actions/upload-artifact@v3
      with:
        name: performance-benchmark-results
        path: /tmp/nas-performance-report.txt

  # 发布通知
  notify:
    runs-on: ubuntu-latest
    name: 发布通知
    needs: [build-and-push, deployment-test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 发送成功通知
      if: needs.build-and-push.result == 'success' && needs.deployment-test.result == 'success'
      run: |
        echo "🚀 NAS 自动化系统构建成功！"
        echo "- 分支: ${{ github.ref_name }}"
        echo "- 提交: ${{ github.sha }}"
        echo "- 作者: ${{ github.actor }}"
        
        # 这里可以集成实际的通知系统
        # curl -X POST "webhook_url" -d "NAS系统构建成功"
        
    - name: 发送失败通知  
      if: needs.build-and-push.result == 'failure' || needs.deployment-test.result == 'failure'
      run: |
        echo "❌ NAS 自动化系统构建失败！"
        echo "- 分支: ${{ github.ref_name }}"
        echo "- 提交: ${{ github.sha }}"
        echo "- 错误: 构建或部署测试失败"
        
        # 这里可以集成实际的通知系统
        # curl -X POST "webhook_url" -d "NAS系统构建失败"