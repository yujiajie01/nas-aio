version: '3.8'

# =============================================================================
# NAS 自动化系统 - 扩展服务 Docker Compose 配置
# =============================================================================

networks:
  nas-network:
    external: true

services:
  # =============================================================================
  # Komga - 漫画服务器
  # =============================================================================
  komga:
    image: gotson/komga:latest
    container_name: komga
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - JAVA_TOOL_OPTIONS=-Xmx2g
    volumes:
      - ${CONFIG_PATH}/komga:/config
      - ${MEDIA_PATH}/comics:/data/comics:ro
      - ${MEDIA_PATH}/books:/data/books:ro
    ports:
      - "25600:25600"
    networks:
      nas-network:
        ipv4_address: 172.20.0.20
    user: "${PUID:-1000}:${PGID:-1000}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:25600/api/v1/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Tachidesk - 在线漫画聚合器
  # =============================================================================
  tachidesk:
    image: ghcr.io/suwayomi/tachidesk:latest
    container_name: tachidesk
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - BIND_IP=0.0.0.0
      - BIND_PORT=4567
    volumes:
      - ${CONFIG_PATH}/tachidesk:/home/suwayomi/.local/share/Tachidesk
      - ${MEDIA_PATH}/comics:/data/comics
    ports:
      - "4567:4567"
    networks:
      nas-network:
        ipv4_address: 172.20.0.21
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4567/api/v1/settings/about"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Audiobookshelf - 有声书服务器
  # =============================================================================
  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: audiobookshelf
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${MEDIA_PATH}/audiobooks:/audiobooks
      - ${MEDIA_PATH}/books:/books
      - ${CONFIG_PATH}/audiobookshelf:/config
      - ${CONFIG_PATH}/audiobookshelf/metadata:/metadata
    ports:
      - "25378:80"
    networks:
      nas-network:
        ipv4_address: 172.20.0.22
    user: "${PUID:-1000}:${PGID:-1000}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Navidrome - 音乐服务器
  # =============================================================================
  navidrome:
    image: deluan/navidrome:latest
    container_name: navidrome
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - ND_SCANSCHEDULE=1h
      - ND_LOGLEVEL=info
      - ND_SESSIONTIMEOUT=24h
      - ND_BASEURL=""
    volumes:
      - ${CONFIG_PATH}/navidrome:/data
      - ${MEDIA_PATH}/music:/music:ro
    ports:
      - "25533:4533"
    networks:
      nas-network:
        ipv4_address: 172.20.0.23
    user: "${PUID:-1000}:${PGID:-1000}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4533/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Calibre - 电子书管理
  # =============================================================================
  calibre:
    image: linuxserver/calibre:latest
    container_name: calibre
    restart: unless-stopped
    environment:
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
      - TZ=${TZ:-Asia/Shanghai}
      - UMASK=022
    volumes:
      - ${CONFIG_PATH}/calibre:/config
      - ${MEDIA_PATH}/books:/books
    ports:
      - "8083:8080"
      - "8181:8181"
    networks:
      nas-network:
        ipv4_address: 172.20.0.24
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Reader - 小说阅读服务器
  # =============================================================================
  reader:
    image: hectorqin/reader:latest
    container_name: reader
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - SPRING_PROFILES_ACTIVE=prod
      - READER_APP_USERLIMIT=50
      - READER_APP_USERBOOKLIMIT=200
      - READER_APP_CACHECHAPTERCONTENT=true
    volumes:
      - ${CONFIG_PATH}/reader:/config
      - ${MEDIA_PATH}/novels:/novels:ro
      - ${CONFIG_PATH}/reader/logs:/logs
    ports:
      - "8082:8080"
    networks:
      nas-network:
        ipv4_address: 172.20.0.25
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Homepage - 统一导航页面
  # =============================================================================
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - PUID=${PUID:-1000}
      - PGID=${PGID:-1000}
    volumes:
      - ${CONFIG_PATH}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "3000:3000"
    networks:
      nas-network:
        ipv4_address: 172.20.0.26
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Vertex - PT 刷流工具
  # =============================================================================
  vertex:
    image: vertex/vertex:latest
    container_name: vertex
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - VERTEX_WEBUI_PASSWORD=${VERTEX_PASSWORD:-adminpass}
    volumes:
      - ${CONFIG_PATH}/vertex:/config
      - ${DOWNLOAD_PATH}:/downloads
      - ${CONFIG_PATH}/vertex/logs:/logs
    ports:
      - "3030:3000"
    networks:
      nas-network:
        ipv4_address: 172.20.0.27
    depends_on:
      - qbittorrent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # FreshRSS - RSS 阅读器
  # =============================================================================
  freshrss:
    image: freshrss/freshrss:latest
    container_name: freshrss
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - CRON_MIN=1,31
    volumes:
      - ${CONFIG_PATH}/freshrss/data:/var/www/FreshRSS/data
      - ${CONFIG_PATH}/freshrss/extensions:/var/www/FreshRSS/extensions
    ports:
      - "8084:80"
    networks:
      nas-network:
        ipv4_address: 172.20.0.28
    depends_on:
      - rsshub
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # RSSHub - RSS 生成器
  # =============================================================================
  rsshub:
    image: diygod/rsshub:latest
    container_name: rsshub
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - NODE_ENV=production
      - CACHE_TYPE=redis
      - REDIS_URL=redis://redis:6379/
      - PUPPETEER_WS_ENDPOINT=ws://browserless:3000
    ports:
      - "1200:1200"
    networks:
      nas-network:
        ipv4_address: 172.20.0.29
    depends_on:
      - redis
      - browserless
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Redis - RSSHub 缓存
  # =============================================================================
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/redis:/data
    networks:
      nas-network:
        ipv4_address: 172.20.0.30
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Browserless - RSSHub 浏览器支持
  # =============================================================================
  browserless:
    image: browserless/chrome:latest
    container_name: browserless
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - MAX_CONCURRENT_SESSIONS=1
      - CONNECTION_TIMEOUT=60000
    networks:
      nas-network:
        ipv4_address: 172.20.0.31
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Metube - 视频下载工具
  # =============================================================================
  metube:
    image: alexta69/metube:latest
    container_name: metube
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - UID=${PUID:-1000}
      - GID=${PGID:-1000}
    volumes:
      - ${DOWNLOAD_PATH}/videos:/downloads
      - ${CONFIG_PATH}/metube:/config
    ports:
      - "8081:8081"
    networks:
      nas-network:
        ipv4_address: 172.20.0.32
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s