version: '3.8'

# =============================================================================
# NAS 自动化系统 - 监控服务 Docker Compose 配置
# =============================================================================

networks:
  nas-network:
    external: true

services:
  # =============================================================================
  # UptimeKuma - 服务监控
  # =============================================================================
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/uptimekuma:/app/data
    ports:
      - "9001:3001"
    networks:
      nas-network:
        ipv4_address: 172.20.0.40
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Watchtower - 容器自动更新
  # =============================================================================
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_POLL_INTERVAL=86400  # 24小时检查一次
      - WATCHTOWER_SCHEDULE=0 2 * * *   # 每天凌晨2点检查更新
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${WATCHTOWER_EMAIL_FROM:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL_TO:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${WATCHTOWER_EMAIL_SERVER:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${WATCHTOWER_EMAIL_PORT:-587}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${WATCHTOWER_EMAIL_USER:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${WATCHTOWER_EMAIL_PASSWORD:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      nas-network:
        ipv4_address: 172.20.0.41
    command: --cleanup --remove-volumes --include-stopped

  # =============================================================================
  # Portainer - Docker 管理界面
  # =============================================================================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_PATH}/portainer:/data
    ports:
      - "9000:9000"
    networks:
      nas-network:
        ipv4_address: 172.20.0.42
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Grafana - 监控面板
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ${CONFIG_PATH}/grafana:/var/lib/grafana
      - ${CONFIG_PATH}/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      nas-network:
        ipv4_address: 172.20.0.43
    user: "${PUID:-1000}:${PGID:-1000}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Prometheus - 指标收集
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${CONFIG_PATH}/prometheus/data:/prometheus
    ports:
      - "9090:9090"
    networks:
      nas-network:
        ipv4_address: 172.20.0.44
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Node Exporter - 系统指标导出
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      nas-network:
        ipv4_address: 172.20.0.45
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # cAdvisor - 容器指标导出
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      nas-network:
        ipv4_address: 172.20.0.46
    devices:
      - /dev/kmsg:/dev/kmsg
    privileged: true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # AlertManager - 告警管理
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ${CONFIG_PATH}/alertmanager/data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      nas-network:
        ipv4_address: 172.20.0.47
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Log Aggregation - 日志聚合
  # =============================================================================
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/loki:/etc/loki
      - ${CONFIG_PATH}/loki/data:/loki
    ports:
      - "3100:3100"
    networks:
      nas-network:
        ipv4_address: 172.20.0.48
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Promtail - 日志收集
  # =============================================================================
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      - ${CONFIG_PATH}/promtail:/etc/promtail
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      nas-network:
        ipv4_address: 172.20.0.49
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki